{
	"info": {
		"_postman_id": "8a46ca06-ef44-4bf8-bf8d-154fbc6e778d",
		"name": "dz3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. login post",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "sergey",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"title\": \"The person Schema\",\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"title\": \"The u_age Schema\",\r",
							"                    \"type\": \"number\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        28\r",
							"                    ]\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"title\": \"The u_name Schema\",\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [{\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"type\": \"string\",\r",
							"                            \"default\": \"\",\r",
							"                            \"examples\": [\r",
							"                                \"sergey\"\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"type\": \"number\",\r",
							"                            \"examples\": [\r",
							"                                1000,\r",
							"                                28\r",
							"                            ]\r",
							"                        }]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\"sergey\",\r",
							"                            1000,\r",
							"                            28\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"type\": \"number\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        4000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"u_age\": 28,\r",
							"                \"u_name\": [\r",
							"                    \"sergey\",\r",
							"                    1000,\r",
							"                    28\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 4000\r",
							"            }]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"title\": \"The qa_salary_after_12_months Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"examples\": [\r",
							"                2900.0\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"title\": \"The qa_salary_after_6_months Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                2000\r",
							"            ]\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"title\": \"The start_qa_salary Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                1000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"person\": {\r",
							"            \"u_age\": 28,\r",
							"            \"u_name\": [\r",
							"                \"sergey\",\r",
							"                1000,\r",
							"                28\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 4000\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": 2900.0,\r",
							"        \"qa_salary_after_6_months\": 2000,\r",
							"        \"start_qa_salary\": 1000\r",
							"    }]\r",
							"};\r",
							"\r",
							"var result = tv4.validateResult(pm.response.json(), schema);\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var resp = pm.response.json();\r",
							"var request = JSON.parse(request.data);\r",
							"\r",
							"pm.test(\"check salary1\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"check salary2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+request.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"check salary3\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+request.salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"check salary4\", function () {\r",
							"    pm.expect(resp.person.u_salary_1_5_year).to.eql(+request.salary*4);\r",
							"});\r",
							"\r",
							"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.environment.set(\"secondsalary\", resp.person.u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : \"{{age}}\",\r\n    \"salary\" : \"{{salary}}\",\r\n    \"name\" : \"{{name}}\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                28\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"sergey\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"type\": \"array\",\r",
							"            \"default\": [],\r",
							"            \"items\": {\r",
							"                \"anyOf\": [{\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"type\": \"number\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        1000\r",
							"                    ]\r",
							"                },\r",
							"                {\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"type\": \"string\",\r",
							"                    \"examples\": [\r",
							"                        \"2000\",\r",
							"                        \"3000\"\r",
							"                    ]\r",
							"                }]\r",
							"            },\r",
							"            \"examples\": [\r",
							"                [1000,\r",
							"                    \"2000\",\r",
							"                    \"3000\"\r",
							"                ]\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 28,\r",
							"        \"name\": \"sergey\",\r",
							"        \"salary\": [\r",
							"            1000,\r",
							"            \"2000\",\r",
							"            \"3000\"\r",
							"        ]\r",
							"    }]\r",
							"};\r",
							"\r",
							"var result = tv4.validateResult(pm.response.json(), schema);\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"check salary0\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"check salary1\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"check salary2\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"check elements\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.above(+resp.salary[1]);\r",
							"    pm.expect(+resp.salary[2]).to.be.greaterThan(+resp.salary[0]);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                28\r",
							"            ]\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"title\": \"The daily_food Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"examples\": [\r",
							"                0.6\r",
							"            ]\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"title\": \"The daily_sleep Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"examples\": [\r",
							"                125.0\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"sergey\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 28,\r",
							"        \"daily_food\": 0.6,\r",
							"        \"daily_sleep\": 125.0,\r",
							"        \"name\": \"sergey\"\r",
							"    }]\r",
							"};\r",
							"\r",
							"var result = tv4.validateResult(pm.response.json(), schema);\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"check weight\", function () {\r",
							"    pm.expect(resp.daily_sleep).to.eql(req.weight*2.5);\r",
							"});\r",
							"\r",
							"pm.test(\"check check weight2\", function () {\r",
							"    pm.expect(resp.daily_food).to.eql(req.weight*0.012);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"28\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"title\": \"The family Schema\",\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"title\": \"The children Schema\",\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"items\": {\r",
							"                        \"title\": \"A Schema\",\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": {\r",
							"                            \"anyOf\": [{\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"type\": \"string\",\r",
							"                                \"examples\": [\r",
							"                                    \"Alex\",\r",
							"                                    \"Kate\"\r",
							"                                ]\r",
							"                            },\r",
							"                            {\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"type\": \"number\",\r",
							"                                \"examples\": [\r",
							"                                    24,\r",
							"                                    12\r",
							"                                ]\r",
							"                            }]\r",
							"                        },\r",
							"                        \"examples\": [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"type\": \"number\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        16000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"children\": [\r",
							"                    [\"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 16000\r",
							"            }]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"sergey\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                4000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": \"28\",\r",
							"        \"family\": {\r",
							"            \"children\": [\r",
							"                [\"Alex\",\r",
							"                    24\r",
							"                ],\r",
							"                [\"Kate\",\r",
							"                    12\r",
							"                ]\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 16000\r",
							"        },\r",
							"        \"name\": \"sergey\",\r",
							"        \"salary\": 4000\r",
							"    }]\r",
							"};\r",
							"\r",
							"var result = tv4.validateResult(pm.response.json(), schema);\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"// 3) Проверить что значение поля name = значению переменной name из окружения\r",
							"\r",
							"   var resp = pm.response.json();\r",
							"\r",
							"pm.test(\"check var\", function () {\r",
							"    pm.expect(resp.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"// 4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{secondsalary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": "",
			"type": "string"
		}
	]
}